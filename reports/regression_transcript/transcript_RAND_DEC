# 1
# Model Technology ModelSim - Intel FPGA Edition vlog 10.5c Compiler 2017.01 Jan 23 2017
# Start time: 23:31:19 on Apr 21,2024
# vlog -sv -timescale 1ps/1ps -work work -f sources.txt 
# -- Compiling package instr_register_pkg
# -- Compiling module instr_register
# -- Importing package instr_register_pkg
# -- Compiling module instr_register_test
# ** Warning: ../lab01_testbench-interface/instr_register_test.sv(89): (vlog-2240) Treating stand-alone use of function 'check_results' as an implicit VOID cast.
# ** Warning: ../lab01_testbench-interface/instr_register_test.sv(93): (vlog-2240) Treating stand-alone use of function 'final_report' as an implicit VOID cast.
# ** Warning: ../lab01_testbench-interface/instr_register_test.sv(94): (vlog-2240) Treating stand-alone use of function 'tests_report' as an implicit VOID cast.
# ** Warning: ../lab01_testbench-interface/instr_register_test.sv(151): (vlog-2250) Function "check_results" has no return value assignment.
# ** Warning: ../lab01_testbench-interface/instr_register_test.sv(234): (vlog-2250) Function "final_report" has no return value assignment.
# ** Warning: ../lab01_testbench-interface/instr_register_test.sv(248): (vlog-2250) Function "tests_report" has no return value assignment.
# -- Compiling module top
# 
# Top level modules:
# 	top
# End time: 23:31:19 on Apr 21,2024, Elapsed time: 0:00:00
# Errors: 0, Warnings: 6
# vsim -novopt -quiet -nocoverage "+notimingchecks" "+nowarnTSCALE" -sva top -GTEST_NAME=RAND_DEC -GWR_ORDER=1 -GWR_NR=100 -GRD_ORDER=2 -GRD_NR=100 -GSEED_VAL=79125764 
# Start time: 23:31:19 on Apr 21,2024
# 
# 
# ***********************************************************
# ***  THIS IS A SELF-CHECKING TESTBENCH.  YOU DON'T ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# Reseting the instruction register...
# 
# Writing values to register stack...
# Saving test register...
# Write pointer: 0
# Opcode=  x
# Operand_a: x
# Operand_b: x
# Writing to register location 18: 
#   opcode = 3 (ADD)
#   operand_a = -9
#   operand_b = 15
# 
# Saving test register...
# Write pointer: 18
# Opcode=  3
# Operand_a: -9
# Operand_b: 15
# Writing to register location 12: 
#   opcode = 2 (PASSB)
#   operand_a = 15
#   operand_b = 11
# 
# Saving test register...
# Write pointer: 12
# Opcode=  2
# Operand_a: 15
# Operand_b: 11
# Writing to register location 17: 
#   opcode = 4 (SUB)
#   operand_a = -5
#   operand_b = 2
# 
# Saving test register...
# Write pointer: 17
# Opcode=  4
# Operand_a: -5
# Operand_b: 2
# Writing to register location 4: 
#   opcode = 1 (PASSA)
#   operand_a = 2
#   operand_b = 12
# 
# Saving test register...
# Write pointer: 4
# Opcode=  1
# Operand_a: 2
# Operand_b: 12
# Writing to register location 22: 
#   opcode = 4 (SUB)
#   operand_a = 12
#   operand_b = 1
# 
# Saving test register...
# Write pointer: 22
# Opcode=  4
# Operand_a: 12
# Operand_b: 1
# Writing to register location 1: 
#   opcode = 6 (DIV)
#   operand_a = 1
#   operand_b = 4
# 
# Saving test register...
# Write pointer: 1
# Opcode=  6
# Operand_a: 1
# Operand_b: 4
# Writing to register location 9: 
#   opcode = 1 (PASSA)
#   operand_a = -12
#   operand_b = 6
# 
# Saving test register...
# Write pointer: 9
# Opcode=  1
# Operand_a: -12
# Operand_b: 6
# Writing to register location 20: 
#   opcode = 1 (PASSA)
#   operand_a = -10
#   operand_b = 1
# 
# Saving test register...
# Write pointer: 20
# Opcode=  1
# Operand_a: -10
# Operand_b: 1
# Writing to register location 30: 
#   opcode = 4 (SUB)
#   operand_a = 1
#   operand_b = 9
# 
# Saving test register...
# Write pointer: 30
# Opcode=  4
# Operand_a: 1
# Operand_b: 9
# Writing to register location 18: 
#   opcode = 6 (DIV)
#   operand_a = -7
#   operand_b = 4
# 
# Saving test register...
# Write pointer: 18
# Opcode=  6
# Operand_a: -7
# Operand_b: 4
# Writing to register location 7: 
#   opcode = 2 (PASSB)
#   operand_a = 4
#   operand_b = 14
# 
# Saving test register...
# Write pointer: 7
# Opcode=  2
# Operand_a: 4
# Operand_b: 14
# Writing to register location 29: 
#   opcode = 7 (MOD)
#   operand_a = -2
#   operand_b = 2
# 
# Saving test register...
# Write pointer: 29
# Opcode=  7
# Operand_a: -2
# Operand_b: 2
# Writing to register location 11: 
#   opcode = 5 (MULT)
#   operand_a = 2
#   operand_b = 7
# 
# Saving test register...
# Write pointer: 11
# Opcode=  5
# Operand_a: 2
# Operand_b: 7
# Writing to register location 25: 
#   opcode = 3 (ADD)
#   operand_a = -9
#   operand_b = 13
# 
# Saving test register...
# Write pointer: 25
# Opcode=  3
# Operand_a: -9
# Operand_b: 13
# Writing to register location 17: 
#   opcode = 1 (PASSA)
#   operand_a = -3
#   operand_b = 11
# 
# Saving test register...
# Write pointer: 17
# Opcode=  1
# Operand_a: -3
# Operand_b: 11
# Writing to register location 3: 
#   opcode = 1 (PASSA)
#   operand_a = -5
#   operand_b = 9
# 
# Saving test register...
# Write pointer: 3
# Opcode=  1
# Operand_a: -5
# Operand_b: 9
# Writing to register location 8: 
#   opcode = 3 (ADD)
#   operand_a = -7
#   operand_b = 1
# 
# Saving test register...
# Write pointer: 8
# Opcode=  3
# Operand_a: -7
# Operand_b: 1
# Writing to register location 20: 
#   opcode = 0 (ZERO)
#   operand_a = 1
#   operand_b = 3
# 
# Saving test register...
# Write pointer: 20
# Opcode=  0
# Operand_a: 1
# Operand_b: 3
# Writing to register location 23: 
#   opcode = 4 (SUB)
#   operand_a = -13
#   operand_b = 8
# 
# Saving test register...
# Write pointer: 23
# Opcode=  4
# Operand_a: -13
# Operand_b: 8
# Writing to register location 26: 
#   opcode = 7 (MOD)
#   operand_a = -8
#   operand_b = 4
# 
# Saving test register...
# Write pointer: 26
# Opcode=  7
# Operand_a: -8
# Operand_b: 4
# Writing to register location 24: 
#   opcode = 2 (PASSB)
#   operand_a = 4
#   operand_b = 7
# 
# Saving test register...
# Write pointer: 24
# Opcode=  2
# Operand_a: 4
# Operand_b: 7
# Writing to register location 8: 
#   opcode = 0 (ZERO)
#   operand_a = 7
#   operand_b = 10
# 
# Saving test register...
# Write pointer: 8
# Opcode=  0
# Operand_a: 7
# Operand_b: 10
# Writing to register location 31: 
#   opcode = 0 (ZERO)
#   operand_a = 10
#   operand_b = 8
# 
# Saving test register...
# Write pointer: 31
# Opcode=  0
# Operand_a: 10
# Operand_b: 8
# Writing to register location 5: 
#   opcode = 7 (MOD)
#   operand_a = -8
#   operand_b = 8
# 
# Saving test register...
# Write pointer: 5
# Opcode=  7
# Operand_a: -8
# Operand_b: 8
# Writing to register location 22: 
#   opcode = 5 (MULT)
#   operand_a = -8
#   operand_b = 15
# 
# Saving test register...
# Write pointer: 22
# Opcode=  5
# Operand_a: -8
# Operand_b: 15
# Writing to register location 19: 
#   opcode = 6 (DIV)
#   operand_a = 15
#   operand_b = 5
# 
# Saving test register...
# Write pointer: 19
# Opcode=  6
# Operand_a: 15
# Operand_b: 5
# Writing to register location 19: 
#   opcode = 3 (ADD)
#   operand_a = -11
#   operand_b = 6
# 
# Saving test register...
# Write pointer: 19
# Opcode=  3
# Operand_a: -11
# Operand_b: 6
# Writing to register location 0: 
#   opcode = 3 (ADD)
#   operand_a = -10
#   operand_b = 3
# 
# Saving test register...
# Write pointer: 0
# Opcode=  3
# Operand_a: -10
# Operand_b: 3
# Writing to register location 2: 
#   opcode = 0 (ZERO)
#   operand_a = 3
#   operand_b = 3
# 
# Saving test register...
# Write pointer: 2
# Opcode=  0
# Operand_a: 3
# Operand_b: 3
# Writing to register location 21: 
#   opcode = 2 (PASSB)
#   operand_a = -13
#   operand_b = 0
# 
# Saving test register...
# Write pointer: 21
# Opcode=  2
# Operand_a: -13
# Operand_b: 0
# Writing to register location 9: 
#   opcode = 5 (MULT)
#   operand_a = 0
#   operand_b = 2
# 
# Saving test register...
# Write pointer: 9
# Opcode=  5
# Operand_a: 0
# Operand_b: 2
# Writing to register location 27: 
#   opcode = 1 (PASSA)
#   operand_a = 2
#   operand_b = 5
# 
# Saving test register...
# Write pointer: 27
# Opcode=  1
# Operand_a: 2
# Operand_b: 5
# Writing to register location 30: 
#   opcode = 3 (ADD)
#   operand_a = 5
#   operand_b = 9
# 
# Saving test register...
# Write pointer: 30
# Opcode=  3
# Operand_a: 5
# Operand_b: 9
# Writing to register location 21: 
#   opcode = 6 (DIV)
#   operand_a = 9
#   operand_b = 11
# 
# Saving test register...
# Write pointer: 21
# Opcode=  6
# Operand_a: 9
# Operand_b: 11
# Writing to register location 25: 
#   opcode = 5 (MULT)
#   operand_a = -5
#   operand_b = 14
# 
# Saving test register...
# Write pointer: 25
# Opcode=  5
# Operand_a: -5
# Operand_b: 14
# Writing to register location 22: 
#   opcode = 1 (PASSA)
#   operand_a = 14
#   operand_b = 5
# 
# Saving test register...
# Write pointer: 22
# Opcode=  1
# Operand_a: 14
# Operand_b: 5
# Writing to register location 23: 
#   opcode = 6 (DIV)
#   operand_a = -11
#   operand_b = 9
# 
# Saving test register...
# Write pointer: 23
# Opcode=  6
# Operand_a: -11
# Operand_b: 9
# Writing to register location 21: 
#   opcode = 7 (MOD)
#   operand_a = 9
#   operand_b = 6
# 
# Saving test register...
# Write pointer: 21
# Opcode=  7
# Operand_a: 9
# Operand_b: 6
# Writing to register location 5: 
#   opcode = 5 (MULT)
#   operand_a = 6
#   operand_b = 7
# 
# Saving test register...
# Write pointer: 5
# Opcode=  5
# Operand_a: 6
# Operand_b: 7
# Writing to register location 28: 
#   opcode = 5 (MULT)
#   operand_a = 7
#   operand_b = 5
# 
# Saving test register...
# Write pointer: 28
# Opcode=  5
# Operand_a: 7
# Operand_b: 5
# Writing to register location 22: 
#   opcode = 4 (SUB)
#   operand_a = 5
#   operand_b = 5
# 
# Saving test register...
# Write pointer: 22
# Opcode=  4
# Operand_a: 5
# Operand_b: 5
# Writing to register location 14: 
#   opcode = 6 (DIV)
#   operand_a = 5
#   operand_b = 12
# 
# Saving test register...
# Write pointer: 14
# Opcode=  6
# Operand_a: 5
# Operand_b: 12
# Writing to register location 23: 
#   opcode = 6 (DIV)
#   operand_a = 12
#   operand_b = 6
# 
# Saving test register...
# Write pointer: 23
# Opcode=  6
# Operand_a: 12
# Operand_b: 6
# Writing to register location 11: 
#   opcode = 7 (MOD)
#   operand_a = 6
#   operand_b = 14
# 
# Saving test register...
# Write pointer: 11
# Opcode=  7
# Operand_a: 6
# Operand_b: 14
# Writing to register location 12: 
#   opcode = 3 (ADD)
#   operand_a = 14
#   operand_b = 7
# 
# Saving test register...
# Write pointer: 12
# Opcode=  3
# Operand_a: 14
# Operand_b: 7
# Writing to register location 10: 
#   opcode = 4 (SUB)
#   operand_a = 7
#   operand_b = 11
# 
# Saving test register...
# Write pointer: 10
# Opcode=  4
# Operand_a: 7
# Operand_b: 11
# Writing to register location 0: 
#   opcode = 2 (PASSB)
#   operand_a = 11
#   operand_b = 12
# 
# Saving test register...
# Write pointer: 0
# Opcode=  2
# Operand_a: 11
# Operand_b: 12
# Writing to register location 15: 
#   opcode = 0 (ZERO)
#   operand_a = -4
#   operand_b = 10
# 
# Saving test register...
# Write pointer: 15
# Opcode=  0
# Operand_a: -4
# Operand_b: 10
# Writing to register location 24: 
#   opcode = 7 (MOD)
#   operand_a = 10
#   operand_b = 0
# 
# Saving test register...
# Write pointer: 24
# Opcode=  7
# Operand_a: 10
# Operand_b: 0
# Writing to register location 20: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 15
# 
# Saving test register...
# Write pointer: 20
# Opcode=  0
# Operand_a: 0
# Operand_b: 15
# Writing to register location 9: 
#   opcode = 4 (SUB)
#   operand_a = -1
#   operand_b = 8
# 
# Saving test register...
# Write pointer: 9
# Opcode=  4
# Operand_a: -1
# Operand_b: 8
# Writing to register location 28: 
#   opcode = 1 (PASSA)
#   operand_a = 8
#   operand_b = 4
# 
# Saving test register...
# Write pointer: 28
# Opcode=  1
# Operand_a: 8
# Operand_b: 4
# Writing to register location 21: 
#   opcode = 4 (SUB)
#   operand_a = -12
#   operand_b = 9
# 
# Saving test register...
# Write pointer: 21
# Opcode=  4
# Operand_a: -12
# Operand_b: 9
# Writing to register location 31: 
#   opcode = 5 (MULT)
#   operand_a = 9
#   operand_b = 12
# 
# Saving test register...
# Write pointer: 31
# Opcode=  5
# Operand_a: 9
# Operand_b: 12
# Writing to register location 11: 
#   opcode = 7 (MOD)
#   operand_a = 12
#   operand_b = 5
# 
# Saving test register...
# Write pointer: 11
# Opcode=  7
# Operand_a: 12
# Operand_b: 5
# Writing to register location 2: 
#   opcode = 3 (ADD)
#   operand_a = -11
#   operand_b = 15
# 
# Saving test register...
# Write pointer: 2
# Opcode=  3
# Operand_a: -11
# Operand_b: 15
# Writing to register location 19: 
#   opcode = 2 (PASSB)
#   operand_a = 15
#   operand_b = 11
# 
# Saving test register...
# Write pointer: 19
# Opcode=  2
# Operand_a: 15
# Operand_b: 11
# Writing to register location 10: 
#   opcode = 3 (ADD)
#   operand_a = -5
#   operand_b = 2
# 
# Saving test register...
# Write pointer: 10
# Opcode=  3
# Operand_a: -5
# Operand_b: 2
# Writing to register location 5: 
#   opcode = 2 (PASSB)
#   operand_a = 2
#   operand_b = 3
# 
# Saving test register...
# Write pointer: 5
# Opcode=  2
# Operand_a: 2
# Operand_b: 3
# Writing to register location 27: 
#   opcode = 5 (MULT)
#   operand_a = 3
#   operand_b = 10
# 
# Saving test register...
# Write pointer: 27
# Opcode=  5
# Operand_a: 3
# Operand_b: 10
# Writing to register location 7: 
#   opcode = 3 (ADD)
#   operand_a = -6
#   operand_b = 5
# 
# Saving test register...
# Write pointer: 7
# Opcode=  3
# Operand_a: -6
# Operand_b: 5
# Writing to register location 12: 
#   opcode = 7 (MOD)
#   operand_a = -11
#   operand_b = 11
# 
# Saving test register...
# Write pointer: 12
# Opcode=  7
# Operand_a: -11
# Operand_b: 11
# Writing to register location 19: 
#   opcode = 4 (SUB)
#   operand_a = 11
#   operand_b = 7
# 
# Saving test register...
# Write pointer: 19
# Opcode=  4
# Operand_a: 11
# Operand_b: 7
# Writing to register location 30: 
#   opcode = 3 (ADD)
#   operand_a = -9
#   operand_b = 12
# 
# Saving test register...
# Write pointer: 30
# Opcode=  3
# Operand_a: -9
# Operand_b: 12
# Writing to register location 21: 
#   opcode = 6 (DIV)
#   operand_a = -4
#   operand_b = 3
# 
# Saving test register...
# Write pointer: 21
# Opcode=  6
# Operand_a: -4
# Operand_b: 3
# Writing to register location 19: 
#   opcode = 5 (MULT)
#   operand_a = -13
#   operand_b = 14
# 
# Saving test register...
# Write pointer: 19
# Opcode=  5
# Operand_a: -13
# Operand_b: 14
# Writing to register location 19: 
#   opcode = 3 (ADD)
#   operand_a = -2
#   operand_b = 5
# 
# Saving test register...
# Write pointer: 19
# Opcode=  3
# Operand_a: -2
# Operand_b: 5
# Writing to register location 25: 
#   opcode = 3 (ADD)
#   operand_a = -11
#   operand_b = 3
# 
# Saving test register...
# Write pointer: 25
# Opcode=  3
# Operand_a: -11
# Operand_b: 3
# Writing to register location 9: 
#   opcode = 1 (PASSA)
#   operand_a = 3
#   operand_b = 3
# 
# Saving test register...
# Write pointer: 9
# Opcode=  1
# Operand_a: 3
# Operand_b: 3
# Writing to register location 19: 
#   opcode = 1 (PASSA)
#   operand_a = -13
#   operand_b = 9
# 
# Saving test register...
# Write pointer: 19
# Opcode=  1
# Operand_a: -13
# Operand_b: 9
# Writing to register location 17: 
#   opcode = 3 (ADD)
#   operand_a = 9
#   operand_b = 9
# 
# Saving test register...
# Write pointer: 17
# Opcode=  3
# Operand_a: 9
# Operand_b: 9
# Writing to register location 3: 
#   opcode = 1 (PASSA)
#   operand_a = -7
#   operand_b = 3
# 
# Saving test register...
# Write pointer: 3
# Opcode=  1
# Operand_a: -7
# Operand_b: 3
# Writing to register location 18: 
#   opcode = 3 (ADD)
#   operand_a = -13
#   operand_b = 1
# 
# Saving test register...
# Write pointer: 18
# Opcode=  3
# Operand_a: -13
# Operand_b: 1
# Writing to register location 30: 
#   opcode = 2 (PASSB)
#   operand_a = 1
#   operand_b = 3
# 
# Saving test register...
# Write pointer: 30
# Opcode=  2
# Operand_a: 1
# Operand_b: 3
# Writing to register location 25: 
#   opcode = 6 (DIV)
#   operand_a = 3
#   operand_b = 2
# 
# Saving test register...
# Write pointer: 25
# Opcode=  6
# Operand_a: 3
# Operand_b: 2
# Writing to register location 9: 
#   opcode = 1 (PASSA)
#   operand_a = 2
#   operand_b = 14
# 
# Saving test register...
# Write pointer: 9
# Opcode=  1
# Operand_a: 2
# Operand_b: 14
# Writing to register location 26: 
#   opcode = 1 (PASSA)
#   operand_a = 14
#   operand_b = 9
# 
# Saving test register...
# Write pointer: 26
# Opcode=  1
# Operand_a: 14
# Operand_b: 9
# Writing to register location 27: 
#   opcode = 2 (PASSB)
#   operand_a = -7
#   operand_b = 9
# 
# Saving test register...
# Write pointer: 27
# Opcode=  2
# Operand_a: -7
# Operand_b: 9
# Writing to register location 31: 
#   opcode = 3 (ADD)
#   operand_a = 9
#   operand_b = 10
# 
# Saving test register...
# Write pointer: 31
# Opcode=  3
# Operand_a: 9
# Operand_b: 10
# Writing to register location 27: 
#   opcode = 7 (MOD)
#   operand_a = -6
#   operand_b = 11
# 
# Saving test register...
# Write pointer: 27
# Opcode=  7
# Operand_a: -6
# Operand_b: 11
# Writing to register location 21: 
#   opcode = 3 (ADD)
#   operand_a = 11
#   operand_b = 15
# 
# Saving test register...
# Write pointer: 21
# Opcode=  3
# Operand_a: 11
# Operand_b: 15
# Writing to register location 21: 
#   opcode = 5 (MULT)
#   operand_a = -1
#   operand_b = 11
# 
# Saving test register...
# Write pointer: 21
# Opcode=  5
# Operand_a: -1
# Operand_b: 11
# Writing to register location 26: 
#   opcode = 5 (MULT)
#   operand_a = 11
#   operand_b = 5
# 
# Saving test register...
# Write pointer: 26
# Opcode=  5
# Operand_a: 11
# Operand_b: 5
# Writing to register location 8: 
#   opcode = 2 (PASSB)
#   operand_a = 5
#   operand_b = 5
# 
# Saving test register...
# Write pointer: 8
# Opcode=  2
# Operand_a: 5
# Operand_b: 5
# Writing to register location 1: 
#   opcode = 0 (ZERO)
#   operand_a = -11
#   operand_b = 10
# 
# Saving test register...
# Write pointer: 1
# Opcode=  0
# Operand_a: -11
# Operand_b: 10
# Writing to register location 22: 
#   opcode = 1 (PASSA)
#   operand_a = -6
#   operand_b = 8
# 
# Saving test register...
# Write pointer: 22
# Opcode=  1
# Operand_a: -6
# Operand_b: 8
# Writing to register location 10: 
#   opcode = 6 (DIV)
#   operand_a = 8
#   operand_b = 1
# 
# Saving test register...
# Write pointer: 10
# Opcode=  6
# Operand_a: 8
# Operand_b: 1
# Writing to register location 16: 
#   opcode = 2 (PASSB)
#   operand_a = -15
#   operand_b = 6
# 
# Saving test register...
# Write pointer: 16
# Opcode=  2
# Operand_a: -15
# Operand_b: 6
# Writing to register location 5: 
#   opcode = 0 (ZERO)
#   operand_a = -10
#   operand_b = 10
# 
# Saving test register...
# Write pointer: 5
# Opcode=  0
# Operand_a: -10
# Operand_b: 10
# Writing to register location 15: 
#   opcode = 5 (MULT)
#   operand_a = 10
#   operand_b = 0
# 
# Saving test register...
# Write pointer: 15
# Opcode=  5
# Operand_a: 10
# Operand_b: 0
# Writing to register location 26: 
#   opcode = 7 (MOD)
#   operand_a = 0
#   operand_b = 5
# 
# Saving test register...
# Write pointer: 26
# Opcode=  7
# Operand_a: 0
# Operand_b: 5
# Writing to register location 8: 
#   opcode = 2 (PASSB)
#   operand_a = 5
#   operand_b = 15
# 
# Saving test register...
# Write pointer: 8
# Opcode=  2
# Operand_a: 5
# Operand_b: 15
# Writing to register location 16: 
#   opcode = 0 (ZERO)
#   operand_a = 15
#   operand_b = 10
# 
# Saving test register...
# Write pointer: 16
# Opcode=  0
# Operand_a: 15
# Operand_b: 10
# Writing to register location 27: 
#   opcode = 0 (ZERO)
#   operand_a = 10
#   operand_b = 8
# 
# Saving test register...
# Write pointer: 27
# Opcode=  0
# Operand_a: 10
# Operand_b: 8
# Writing to register location 3: 
#   opcode = 3 (ADD)
#   operand_a = 8
#   operand_b = 0
# 
# Saving test register...
# Write pointer: 3
# Opcode=  3
# Operand_a: 8
# Operand_b: 0
# Writing to register location 10: 
#   opcode = 3 (ADD)
#   operand_a = 0
#   operand_b = 11
# 
# Saving test register...
# Write pointer: 10
# Opcode=  3
# Operand_a: 0
# Operand_b: 11
# Writing to register location 19: 
#   opcode = 2 (PASSB)
#   operand_a = -5
#   operand_b = 3
# 
# Saving test register...
# Write pointer: 19
# Opcode=  2
# Operand_a: -5
# Operand_b: 3
# Writing to register location 27: 
#   opcode = 3 (ADD)
#   operand_a = -13
#   operand_b = 10
# 
# Saving test register...
# Write pointer: 27
# Opcode=  3
# Operand_a: -13
# Operand_b: 10
# Writing to register location 30: 
#   opcode = 3 (ADD)
#   operand_a = 10
#   operand_b = 3
# 
# Saving test register...
# Write pointer: 30
# Opcode=  3
# Operand_a: 10
# Operand_b: 3
# Writing to register location 15: 
#   opcode = 6 (DIV)
#   operand_a = 3
#   operand_b = 11
# 
# Saving test register...
# Write pointer: 15
# Opcode=  6
# Operand_a: 3
# Operand_b: 11
# 
# Reading back the same register locations written...
# Read from register location 31: 
#   opcode = 3 (ADD)
#   operand_a = 9
#   operand_b = 10
# 
#   result = 19
# 
# 
# Check Results:
#   read_pointer = 31
#   opcode = 3 (ADD)
#   operand_a = 9
#   operand_b = 10
# Actual result DUT = 19
# 
# Expected result  = 19
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 30: 
#   opcode = 3 (ADD)
#   operand_a = 10
#   operand_b = 3
# 
#   result = 13
# 
# 
# Check Results:
#   read_pointer = 30
#   opcode = 3 (ADD)
#   operand_a = 10
#   operand_b = 3
# Actual result DUT = 13
# 
# Expected result  = 13
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 29: 
#   opcode = 7 (MOD)
#   operand_a = -2
#   operand_b = 2
# 
#   result = 0
# 
# 
# Check Results:
#   read_pointer = 29
#   opcode = 7 (MOD)
#   operand_a = -2
#   operand_b = 2
# Actual result DUT = 0
# 
# Expected result  = 0
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 28: 
#   opcode = 1 (PASSA)
#   operand_a = 8
#   operand_b = 4
# 
#   result = 8
# 
# 
# Check Results:
#   read_pointer = 28
#   opcode = 1 (PASSA)
#   operand_a = 8
#   operand_b = 4
# Actual result DUT = 8
# 
# Expected result  = 8
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 27: 
#   opcode = 3 (ADD)
#   operand_a = -13
#   operand_b = 10
# 
#   result = -3
# 
# 
# Check Results:
#   read_pointer = 27
#   opcode = 3 (ADD)
#   operand_a = -13
#   operand_b = 10
# Actual result DUT = -3
# 
# Expected result  = -3
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 26: 
#   opcode = 7 (MOD)
#   operand_a = 0
#   operand_b = 5
# 
#   result = 0
# 
# 
# Check Results:
#   read_pointer = 26
#   opcode = 7 (MOD)
#   operand_a = 0
#   operand_b = 5
# Actual result DUT = 0
# 
# Expected result  = 0
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 25: 
#   opcode = 6 (DIV)
#   operand_a = 3
#   operand_b = 2
# 
#   result = 1
# 
# 
# Check Results:
#   read_pointer = 25
#   opcode = 6 (DIV)
#   operand_a = 3
#   operand_b = 2
# Actual result DUT = 1
# 
# Expected result  = 1
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 24: 
#   opcode = 7 (MOD)
#   operand_a = 10
#   operand_b = 0
# 
#   result = 0
# 
# 
# Check Results:
#   read_pointer = 24
#   opcode = 7 (MOD)
#   operand_a = 10
#   operand_b = 0
# Actual result DUT = 0
# 
# Expected result  = 0
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 23: 
#   opcode = 6 (DIV)
#   operand_a = 12
#   operand_b = 6
# 
#   result = 2
# 
# 
# Check Results:
#   read_pointer = 23
#   opcode = 6 (DIV)
#   operand_a = 12
#   operand_b = 6
# Actual result DUT = 2
# 
# Expected result  = 2
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 22: 
#   opcode = 1 (PASSA)
#   operand_a = -6
#   operand_b = 8
# 
#   result = -6
# 
# 
# Check Results:
#   read_pointer = 22
#   opcode = 1 (PASSA)
#   operand_a = -6
#   operand_b = 8
# Actual result DUT = -6
# 
# Expected result  = -6
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 21: 
#   opcode = 5 (MULT)
#   operand_a = -1
#   operand_b = 11
# 
#   result = -11
# 
# 
# Check Results:
#   read_pointer = 21
#   opcode = 5 (MULT)
#   operand_a = -1
#   operand_b = 11
# Actual result DUT = -11
# 
# Expected result  = -11
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 20: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 15
# 
#   result = 0
# 
# 
# Check Results:
#   read_pointer = 20
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 15
# Actual result DUT = 0
# 
# Expected result  = 0
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 19: 
#   opcode = 2 (PASSB)
#   operand_a = -5
#   operand_b = 3
# 
#   result = 3
# 
# 
# Check Results:
#   read_pointer = 19
#   opcode = 2 (PASSB)
#   operand_a = -5
#   operand_b = 3
# Actual result DUT = 3
# 
# Expected result  = 3
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 18: 
#   opcode = 3 (ADD)
#   operand_a = -13
#   operand_b = 1
# 
#   result = -12
# 
# 
# Check Results:
#   read_pointer = 18
#   opcode = 3 (ADD)
#   operand_a = -13
#   operand_b = 1
# Actual result DUT = -12
# 
# Expected result  = -12
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 17: 
#   opcode = 3 (ADD)
#   operand_a = 9
#   operand_b = 9
# 
#   result = 18
# 
# 
# Check Results:
#   read_pointer = 17
#   opcode = 3 (ADD)
#   operand_a = 9
#   operand_b = 9
# Actual result DUT = 18
# 
# Expected result  = 18
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 16: 
#   opcode = 0 (ZERO)
#   operand_a = 15
#   operand_b = 10
# 
#   result = 0
# 
# 
# Check Results:
#   read_pointer = 16
#   opcode = 0 (ZERO)
#   operand_a = 15
#   operand_b = 10
# Actual result DUT = 0
# 
# Expected result  = 0
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 15: 
#   opcode = 6 (DIV)
#   operand_a = 3
#   operand_b = 11
# 
#   result = 0
# 
# 
# Check Results:
#   read_pointer = 15
#   opcode = 6 (DIV)
#   operand_a = 3
#   operand_b = 11
# Actual result DUT = 0
# 
# Expected result  = 0
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 14: 
#   opcode = 6 (DIV)
#   operand_a = 5
#   operand_b = 12
# 
#   result = 0
# 
# 
# Check Results:
#   read_pointer = 14
#   opcode = 6 (DIV)
#   operand_a = 5
#   operand_b = 12
# Actual result DUT = 0
# 
# Expected result  = 0
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 13: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# 
# Check Results:
#   read_pointer = 13
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# Actual result DUT = 0
# 
# Expected result  = 0
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 12: 
#   opcode = 7 (MOD)
#   operand_a = -11
#   operand_b = 11
# 
#   result = 0
# 
# 
# Check Results:
#   read_pointer = 12
#   opcode = 7 (MOD)
#   operand_a = -11
#   operand_b = 11
# Actual result DUT = 0
# 
# Expected result  = 0
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 11: 
#   opcode = 7 (MOD)
#   operand_a = 12
#   operand_b = 5
# 
#   result = 2
# 
# 
# Check Results:
#   read_pointer = 11
#   opcode = 7 (MOD)
#   operand_a = 12
#   operand_b = 5
# Actual result DUT = 2
# 
# Expected result  = 2
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 10: 
#   opcode = 3 (ADD)
#   operand_a = 0
#   operand_b = 11
# 
#   result = 11
# 
# 
# Check Results:
#   read_pointer = 10
#   opcode = 3 (ADD)
#   operand_a = 0
#   operand_b = 11
# Actual result DUT = 11
# 
# Expected result  = 11
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 9: 
#   opcode = 1 (PASSA)
#   operand_a = 2
#   operand_b = 14
# 
#   result = 2
# 
# 
# Check Results:
#   read_pointer = 9
#   opcode = 1 (PASSA)
#   operand_a = 2
#   operand_b = 14
# Actual result DUT = 2
# 
# Expected result  = 2
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 8: 
#   opcode = 2 (PASSB)
#   operand_a = 5
#   operand_b = 15
# 
#   result = 15
# 
# 
# Check Results:
#   read_pointer = 8
#   opcode = 2 (PASSB)
#   operand_a = 5
#   operand_b = 15
# Actual result DUT = 15
# 
# Expected result  = 15
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 7: 
#   opcode = 3 (ADD)
#   operand_a = -6
#   operand_b = 5
# 
#   result = -1
# 
# 
# Check Results:
#   read_pointer = 7
#   opcode = 3 (ADD)
#   operand_a = -6
#   operand_b = 5
# Actual result DUT = -1
# 
# Expected result  = -1
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 6: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# 
# Check Results:
#   read_pointer = 6
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# Actual result DUT = 0
# 
# Expected result  = 0
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 5: 
#   opcode = 0 (ZERO)
#   operand_a = -10
#   operand_b = 10
# 
#   result = 0
# 
# 
# Check Results:
#   read_pointer = 5
#   opcode = 0 (ZERO)
#   operand_a = -10
#   operand_b = 10
# Actual result DUT = 0
# 
# Expected result  = 0
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 4: 
#   opcode = 1 (PASSA)
#   operand_a = 2
#   operand_b = 12
# 
#   result = 2
# 
# 
# Check Results:
#   read_pointer = 4
#   opcode = 1 (PASSA)
#   operand_a = 2
#   operand_b = 12
# Actual result DUT = 2
# 
# Expected result  = 2
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 3: 
#   opcode = 3 (ADD)
#   operand_a = 8
#   operand_b = 0
# 
#   result = 8
# 
# 
# Check Results:
#   read_pointer = 3
#   opcode = 3 (ADD)
#   operand_a = 8
#   operand_b = 0
# Actual result DUT = 8
# 
# Expected result  = 8
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 2: 
#   opcode = 3 (ADD)
#   operand_a = -11
#   operand_b = 15
# 
#   result = 4
# 
# 
# Check Results:
#   read_pointer = 2
#   opcode = 3 (ADD)
#   operand_a = -11
#   operand_b = 15
# Actual result DUT = 4
# 
# Expected result  = 4
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 1: 
#   opcode = 0 (ZERO)
#   operand_a = -11
#   operand_b = 10
# 
#   result = 0
# 
# 
# Check Results:
#   read_pointer = 1
#   opcode = 0 (ZERO)
#   operand_a = -11
#   operand_b = 10
# Actual result DUT = 0
# 
# Expected result  = 0
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 0: 
#   opcode = 2 (PASSB)
#   operand_a = 11
#   operand_b = 12
# 
#   result = 12
# 
# 
# Check Results:
#   read_pointer = 0
#   opcode = 2 (PASSB)
#   operand_a = 11
#   operand_b = 12
# Actual result DUT = 12
# 
# Expected result  = 12
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 31: 
#   opcode = 3 (ADD)
#   operand_a = 9
#   operand_b = 10
# 
#   result = 19
# 
# 
# Check Results:
#   read_pointer = 31
#   opcode = 3 (ADD)
#   operand_a = 9
#   operand_b = 10
# Actual result DUT = 19
# 
# Expected result  = 19
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 30: 
#   opcode = 3 (ADD)
#   operand_a = 10
#   operand_b = 3
# 
#   result = 13
# 
# 
# Check Results:
#   read_pointer = 30
#   opcode = 3 (ADD)
#   operand_a = 10
#   operand_b = 3
# Actual result DUT = 13
# 
# Expected result  = 13
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 29: 
#   opcode = 7 (MOD)
#   operand_a = -2
#   operand_b = 2
# 
#   result = 0
# 
# 
# Check Results:
#   read_pointer = 29
#   opcode = 7 (MOD)
#   operand_a = -2
#   operand_b = 2
# Actual result DUT = 0
# 
# Expected result  = 0
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 28: 
#   opcode = 1 (PASSA)
#   operand_a = 8
#   operand_b = 4
# 
#   result = 8
# 
# 
# Check Results:
#   read_pointer = 28
#   opcode = 1 (PASSA)
#   operand_a = 8
#   operand_b = 4
# Actual result DUT = 8
# 
# Expected result  = 8
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 27: 
#   opcode = 3 (ADD)
#   operand_a = -13
#   operand_b = 10
# 
#   result = -3
# 
# 
# Check Results:
#   read_pointer = 27
#   opcode = 3 (ADD)
#   operand_a = -13
#   operand_b = 10
# Actual result DUT = -3
# 
# Expected result  = -3
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 26: 
#   opcode = 7 (MOD)
#   operand_a = 0
#   operand_b = 5
# 
#   result = 0
# 
# 
# Check Results:
#   read_pointer = 26
#   opcode = 7 (MOD)
#   operand_a = 0
#   operand_b = 5
# Actual result DUT = 0
# 
# Expected result  = 0
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 25: 
#   opcode = 6 (DIV)
#   operand_a = 3
#   operand_b = 2
# 
#   result = 1
# 
# 
# Check Results:
#   read_pointer = 25
#   opcode = 6 (DIV)
#   operand_a = 3
#   operand_b = 2
# Actual result DUT = 1
# 
# Expected result  = 1
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 24: 
#   opcode = 7 (MOD)
#   operand_a = 10
#   operand_b = 0
# 
#   result = 0
# 
# 
# Check Results:
#   read_pointer = 24
#   opcode = 7 (MOD)
#   operand_a = 10
#   operand_b = 0
# Actual result DUT = 0
# 
# Expected result  = 0
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 23: 
#   opcode = 6 (DIV)
#   operand_a = 12
#   operand_b = 6
# 
#   result = 2
# 
# 
# Check Results:
#   read_pointer = 23
#   opcode = 6 (DIV)
#   operand_a = 12
#   operand_b = 6
# Actual result DUT = 2
# 
# Expected result  = 2
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 22: 
#   opcode = 1 (PASSA)
#   operand_a = -6
#   operand_b = 8
# 
#   result = -6
# 
# 
# Check Results:
#   read_pointer = 22
#   opcode = 1 (PASSA)
#   operand_a = -6
#   operand_b = 8
# Actual result DUT = -6
# 
# Expected result  = -6
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 21: 
#   opcode = 5 (MULT)
#   operand_a = -1
#   operand_b = 11
# 
#   result = -11
# 
# 
# Check Results:
#   read_pointer = 21
#   opcode = 5 (MULT)
#   operand_a = -1
#   operand_b = 11
# Actual result DUT = -11
# 
# Expected result  = -11
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 20: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 15
# 
#   result = 0
# 
# 
# Check Results:
#   read_pointer = 20
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 15
# Actual result DUT = 0
# 
# Expected result  = 0
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 19: 
#   opcode = 2 (PASSB)
#   operand_a = -5
#   operand_b = 3
# 
#   result = 3
# 
# 
# Check Results:
#   read_pointer = 19
#   opcode = 2 (PASSB)
#   operand_a = -5
#   operand_b = 3
# Actual result DUT = 3
# 
# Expected result  = 3
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 18: 
#   opcode = 3 (ADD)
#   operand_a = -13
#   operand_b = 1
# 
#   result = -12
# 
# 
# Check Results:
#   read_pointer = 18
#   opcode = 3 (ADD)
#   operand_a = -13
#   operand_b = 1
# Actual result DUT = -12
# 
# Expected result  = -12
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 17: 
#   opcode = 3 (ADD)
#   operand_a = 9
#   operand_b = 9
# 
#   result = 18
# 
# 
# Check Results:
#   read_pointer = 17
#   opcode = 3 (ADD)
#   operand_a = 9
#   operand_b = 9
# Actual result DUT = 18
# 
# Expected result  = 18
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 16: 
#   opcode = 0 (ZERO)
#   operand_a = 15
#   operand_b = 10
# 
#   result = 0
# 
# 
# Check Results:
#   read_pointer = 16
#   opcode = 0 (ZERO)
#   operand_a = 15
#   operand_b = 10
# Actual result DUT = 0
# 
# Expected result  = 0
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 15: 
#   opcode = 6 (DIV)
#   operand_a = 3
#   operand_b = 11
# 
#   result = 0
# 
# 
# Check Results:
#   read_pointer = 15
#   opcode = 6 (DIV)
#   operand_a = 3
#   operand_b = 11
# Actual result DUT = 0
# 
# Expected result  = 0
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 14: 
#   opcode = 6 (DIV)
#   operand_a = 5
#   operand_b = 12
# 
#   result = 0
# 
# 
# Check Results:
#   read_pointer = 14
#   opcode = 6 (DIV)
#   operand_a = 5
#   operand_b = 12
# Actual result DUT = 0
# 
# Expected result  = 0
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 13: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# 
# Check Results:
#   read_pointer = 13
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# Actual result DUT = 0
# 
# Expected result  = 0
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 12: 
#   opcode = 7 (MOD)
#   operand_a = -11
#   operand_b = 11
# 
#   result = 0
# 
# 
# Check Results:
#   read_pointer = 12
#   opcode = 7 (MOD)
#   operand_a = -11
#   operand_b = 11
# Actual result DUT = 0
# 
# Expected result  = 0
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 11: 
#   opcode = 7 (MOD)
#   operand_a = 12
#   operand_b = 5
# 
#   result = 2
# 
# 
# Check Results:
#   read_pointer = 11
#   opcode = 7 (MOD)
#   operand_a = 12
#   operand_b = 5
# Actual result DUT = 2
# 
# Expected result  = 2
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 10: 
#   opcode = 3 (ADD)
#   operand_a = 0
#   operand_b = 11
# 
#   result = 11
# 
# 
# Check Results:
#   read_pointer = 10
#   opcode = 3 (ADD)
#   operand_a = 0
#   operand_b = 11
# Actual result DUT = 11
# 
# Expected result  = 11
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 9: 
#   opcode = 1 (PASSA)
#   operand_a = 2
#   operand_b = 14
# 
#   result = 2
# 
# 
# Check Results:
#   read_pointer = 9
#   opcode = 1 (PASSA)
#   operand_a = 2
#   operand_b = 14
# Actual result DUT = 2
# 
# Expected result  = 2
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 8: 
#   opcode = 2 (PASSB)
#   operand_a = 5
#   operand_b = 15
# 
#   result = 15
# 
# 
# Check Results:
#   read_pointer = 8
#   opcode = 2 (PASSB)
#   operand_a = 5
#   operand_b = 15
# Actual result DUT = 15
# 
# Expected result  = 15
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 7: 
#   opcode = 3 (ADD)
#   operand_a = -6
#   operand_b = 5
# 
#   result = -1
# 
# 
# Check Results:
#   read_pointer = 7
#   opcode = 3 (ADD)
#   operand_a = -6
#   operand_b = 5
# Actual result DUT = -1
# 
# Expected result  = -1
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 6: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# 
# Check Results:
#   read_pointer = 6
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# Actual result DUT = 0
# 
# Expected result  = 0
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 5: 
#   opcode = 0 (ZERO)
#   operand_a = -10
#   operand_b = 10
# 
#   result = 0
# 
# 
# Check Results:
#   read_pointer = 5
#   opcode = 0 (ZERO)
#   operand_a = -10
#   operand_b = 10
# Actual result DUT = 0
# 
# Expected result  = 0
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 4: 
#   opcode = 1 (PASSA)
#   operand_a = 2
#   operand_b = 12
# 
#   result = 2
# 
# 
# Check Results:
#   read_pointer = 4
#   opcode = 1 (PASSA)
#   operand_a = 2
#   operand_b = 12
# Actual result DUT = 2
# 
# Expected result  = 2
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 3: 
#   opcode = 3 (ADD)
#   operand_a = 8
#   operand_b = 0
# 
#   result = 8
# 
# 
# Check Results:
#   read_pointer = 3
#   opcode = 3 (ADD)
#   operand_a = 8
#   operand_b = 0
# Actual result DUT = 8
# 
# Expected result  = 8
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 2: 
#   opcode = 3 (ADD)
#   operand_a = -11
#   operand_b = 15
# 
#   result = 4
# 
# 
# Check Results:
#   read_pointer = 2
#   opcode = 3 (ADD)
#   operand_a = -11
#   operand_b = 15
# Actual result DUT = 4
# 
# Expected result  = 4
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 1: 
#   opcode = 0 (ZERO)
#   operand_a = -11
#   operand_b = 10
# 
#   result = 0
# 
# 
# Check Results:
#   read_pointer = 1
#   opcode = 0 (ZERO)
#   operand_a = -11
#   operand_b = 10
# Actual result DUT = 0
# 
# Expected result  = 0
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 0: 
#   opcode = 2 (PASSB)
#   operand_a = 11
#   operand_b = 12
# 
#   result = 12
# 
# 
# Check Results:
#   read_pointer = 0
#   opcode = 2 (PASSB)
#   operand_a = 11
#   operand_b = 12
# Actual result DUT = 12
# 
# Expected result  = 12
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 31: 
#   opcode = 3 (ADD)
#   operand_a = 9
#   operand_b = 10
# 
#   result = 19
# 
# 
# Check Results:
#   read_pointer = 31
#   opcode = 3 (ADD)
#   operand_a = 9
#   operand_b = 10
# Actual result DUT = 19
# 
# Expected result  = 19
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 30: 
#   opcode = 3 (ADD)
#   operand_a = 10
#   operand_b = 3
# 
#   result = 13
# 
# 
# Check Results:
#   read_pointer = 30
#   opcode = 3 (ADD)
#   operand_a = 10
#   operand_b = 3
# Actual result DUT = 13
# 
# Expected result  = 13
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 29: 
#   opcode = 7 (MOD)
#   operand_a = -2
#   operand_b = 2
# 
#   result = 0
# 
# 
# Check Results:
#   read_pointer = 29
#   opcode = 7 (MOD)
#   operand_a = -2
#   operand_b = 2
# Actual result DUT = 0
# 
# Expected result  = 0
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 28: 
#   opcode = 1 (PASSA)
#   operand_a = 8
#   operand_b = 4
# 
#   result = 8
# 
# 
# Check Results:
#   read_pointer = 28
#   opcode = 1 (PASSA)
#   operand_a = 8
#   operand_b = 4
# Actual result DUT = 8
# 
# Expected result  = 8
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 27: 
#   opcode = 3 (ADD)
#   operand_a = -13
#   operand_b = 10
# 
#   result = -3
# 
# 
# Check Results:
#   read_pointer = 27
#   opcode = 3 (ADD)
#   operand_a = -13
#   operand_b = 10
# Actual result DUT = -3
# 
# Expected result  = -3
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 26: 
#   opcode = 7 (MOD)
#   operand_a = 0
#   operand_b = 5
# 
#   result = 0
# 
# 
# Check Results:
#   read_pointer = 26
#   opcode = 7 (MOD)
#   operand_a = 0
#   operand_b = 5
# Actual result DUT = 0
# 
# Expected result  = 0
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 25: 
#   opcode = 6 (DIV)
#   operand_a = 3
#   operand_b = 2
# 
#   result = 1
# 
# 
# Check Results:
#   read_pointer = 25
#   opcode = 6 (DIV)
#   operand_a = 3
#   operand_b = 2
# Actual result DUT = 1
# 
# Expected result  = 1
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 24: 
#   opcode = 7 (MOD)
#   operand_a = 10
#   operand_b = 0
# 
#   result = 0
# 
# 
# Check Results:
#   read_pointer = 24
#   opcode = 7 (MOD)
#   operand_a = 10
#   operand_b = 0
# Actual result DUT = 0
# 
# Expected result  = 0
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 23: 
#   opcode = 6 (DIV)
#   operand_a = 12
#   operand_b = 6
# 
#   result = 2
# 
# 
# Check Results:
#   read_pointer = 23
#   opcode = 6 (DIV)
#   operand_a = 12
#   operand_b = 6
# Actual result DUT = 2
# 
# Expected result  = 2
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 22: 
#   opcode = 1 (PASSA)
#   operand_a = -6
#   operand_b = 8
# 
#   result = -6
# 
# 
# Check Results:
#   read_pointer = 22
#   opcode = 1 (PASSA)
#   operand_a = -6
#   operand_b = 8
# Actual result DUT = -6
# 
# Expected result  = -6
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 21: 
#   opcode = 5 (MULT)
#   operand_a = -1
#   operand_b = 11
# 
#   result = -11
# 
# 
# Check Results:
#   read_pointer = 21
#   opcode = 5 (MULT)
#   operand_a = -1
#   operand_b = 11
# Actual result DUT = -11
# 
# Expected result  = -11
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 20: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 15
# 
#   result = 0
# 
# 
# Check Results:
#   read_pointer = 20
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 15
# Actual result DUT = 0
# 
# Expected result  = 0
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 19: 
#   opcode = 2 (PASSB)
#   operand_a = -5
#   operand_b = 3
# 
#   result = 3
# 
# 
# Check Results:
#   read_pointer = 19
#   opcode = 2 (PASSB)
#   operand_a = -5
#   operand_b = 3
# Actual result DUT = 3
# 
# Expected result  = 3
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 18: 
#   opcode = 3 (ADD)
#   operand_a = -13
#   operand_b = 1
# 
#   result = -12
# 
# 
# Check Results:
#   read_pointer = 18
#   opcode = 3 (ADD)
#   operand_a = -13
#   operand_b = 1
# Actual result DUT = -12
# 
# Expected result  = -12
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 17: 
#   opcode = 3 (ADD)
#   operand_a = 9
#   operand_b = 9
# 
#   result = 18
# 
# 
# Check Results:
#   read_pointer = 17
#   opcode = 3 (ADD)
#   operand_a = 9
#   operand_b = 9
# Actual result DUT = 18
# 
# Expected result  = 18
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 16: 
#   opcode = 0 (ZERO)
#   operand_a = 15
#   operand_b = 10
# 
#   result = 0
# 
# 
# Check Results:
#   read_pointer = 16
#   opcode = 0 (ZERO)
#   operand_a = 15
#   operand_b = 10
# Actual result DUT = 0
# 
# Expected result  = 0
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 15: 
#   opcode = 6 (DIV)
#   operand_a = 3
#   operand_b = 11
# 
#   result = 0
# 
# 
# Check Results:
#   read_pointer = 15
#   opcode = 6 (DIV)
#   operand_a = 3
#   operand_b = 11
# Actual result DUT = 0
# 
# Expected result  = 0
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 14: 
#   opcode = 6 (DIV)
#   operand_a = 5
#   operand_b = 12
# 
#   result = 0
# 
# 
# Check Results:
#   read_pointer = 14
#   opcode = 6 (DIV)
#   operand_a = 5
#   operand_b = 12
# Actual result DUT = 0
# 
# Expected result  = 0
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 13: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# 
# Check Results:
#   read_pointer = 13
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# Actual result DUT = 0
# 
# Expected result  = 0
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 12: 
#   opcode = 7 (MOD)
#   operand_a = -11
#   operand_b = 11
# 
#   result = 0
# 
# 
# Check Results:
#   read_pointer = 12
#   opcode = 7 (MOD)
#   operand_a = -11
#   operand_b = 11
# Actual result DUT = 0
# 
# Expected result  = 0
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 11: 
#   opcode = 7 (MOD)
#   operand_a = 12
#   operand_b = 5
# 
#   result = 2
# 
# 
# Check Results:
#   read_pointer = 11
#   opcode = 7 (MOD)
#   operand_a = 12
#   operand_b = 5
# Actual result DUT = 2
# 
# Expected result  = 2
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 10: 
#   opcode = 3 (ADD)
#   operand_a = 0
#   operand_b = 11
# 
#   result = 11
# 
# 
# Check Results:
#   read_pointer = 10
#   opcode = 3 (ADD)
#   operand_a = 0
#   operand_b = 11
# Actual result DUT = 11
# 
# Expected result  = 11
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 9: 
#   opcode = 1 (PASSA)
#   operand_a = 2
#   operand_b = 14
# 
#   result = 2
# 
# 
# Check Results:
#   read_pointer = 9
#   opcode = 1 (PASSA)
#   operand_a = 2
#   operand_b = 14
# Actual result DUT = 2
# 
# Expected result  = 2
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 8: 
#   opcode = 2 (PASSB)
#   operand_a = 5
#   operand_b = 15
# 
#   result = 15
# 
# 
# Check Results:
#   read_pointer = 8
#   opcode = 2 (PASSB)
#   operand_a = 5
#   operand_b = 15
# Actual result DUT = 15
# 
# Expected result  = 15
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 7: 
#   opcode = 3 (ADD)
#   operand_a = -6
#   operand_b = 5
# 
#   result = -1
# 
# 
# Check Results:
#   read_pointer = 7
#   opcode = 3 (ADD)
#   operand_a = -6
#   operand_b = 5
# Actual result DUT = -1
# 
# Expected result  = -1
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 6: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# 
# Check Results:
#   read_pointer = 6
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# Actual result DUT = 0
# 
# Expected result  = 0
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 5: 
#   opcode = 0 (ZERO)
#   operand_a = -10
#   operand_b = 10
# 
#   result = 0
# 
# 
# Check Results:
#   read_pointer = 5
#   opcode = 0 (ZERO)
#   operand_a = -10
#   operand_b = 10
# Actual result DUT = 0
# 
# Expected result  = 0
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 4: 
#   opcode = 1 (PASSA)
#   operand_a = 2
#   operand_b = 12
# 
#   result = 2
# 
# 
# Check Results:
#   read_pointer = 4
#   opcode = 1 (PASSA)
#   operand_a = 2
#   operand_b = 12
# Actual result DUT = 2
# 
# Expected result  = 2
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 3: 
#   opcode = 3 (ADD)
#   operand_a = 8
#   operand_b = 0
# 
#   result = 8
# 
# 
# Check Results:
#   read_pointer = 3
#   opcode = 3 (ADD)
#   operand_a = 8
#   operand_b = 0
# Actual result DUT = 8
# 
# Expected result  = 8
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 2: 
#   opcode = 3 (ADD)
#   operand_a = -11
#   operand_b = 15
# 
#   result = 4
# 
# 
# Check Results:
#   read_pointer = 2
#   opcode = 3 (ADD)
#   operand_a = -11
#   operand_b = 15
# Actual result DUT = 4
# 
# Expected result  = 4
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 1: 
#   opcode = 0 (ZERO)
#   operand_a = -11
#   operand_b = 10
# 
#   result = 0
# 
# 
# Check Results:
#   read_pointer = 1
#   opcode = 0 (ZERO)
#   operand_a = -11
#   operand_b = 10
# Actual result DUT = 0
# 
# Expected result  = 0
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 0: 
#   opcode = 2 (PASSB)
#   operand_a = 11
#   operand_b = 12
# 
#   result = 12
# 
# 
# Check Results:
#   read_pointer = 0
#   opcode = 2 (PASSB)
#   operand_a = 11
#   operand_b = 12
# Actual result DUT = 12
# 
# Expected result  = 12
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 31: 
#   opcode = 3 (ADD)
#   operand_a = 9
#   operand_b = 10
# 
#   result = 19
# 
# 
# Check Results:
#   read_pointer = 31
#   opcode = 3 (ADD)
#   operand_a = 9
#   operand_b = 10
# Actual result DUT = 19
# 
# Expected result  = 19
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 30: 
#   opcode = 3 (ADD)
#   operand_a = 10
#   operand_b = 3
# 
#   result = 13
# 
# 
# Check Results:
#   read_pointer = 30
#   opcode = 3 (ADD)
#   operand_a = 10
#   operand_b = 3
# Actual result DUT = 13
# 
# Expected result  = 13
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 29: 
#   opcode = 7 (MOD)
#   operand_a = -2
#   operand_b = 2
# 
#   result = 0
# 
# 
# Check Results:
#   read_pointer = 29
#   opcode = 7 (MOD)
#   operand_a = -2
#   operand_b = 2
# Actual result DUT = 0
# 
# Expected result  = 0
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 28: 
#   opcode = 1 (PASSA)
#   operand_a = 8
#   operand_b = 4
# 
#   result = 8
# 
# 
# Check Results:
#   read_pointer = 28
#   opcode = 1 (PASSA)
#   operand_a = 8
#   operand_b = 4
# Actual result DUT = 8
# 
# Expected result  = 8
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# Read from register location 27: 
#   opcode = 3 (ADD)
#   operand_a = -13
#   operand_b = 10
# 
#   result = -3
# 
# 
# Check Results:
#   read_pointer = 27
#   opcode = 3 (ADD)
#   operand_a = -13
#   operand_b = 10
# Actual result DUT = -3
# 
# Expected result  = -3
# 
# The opcode is correct!
# Operand_a is correct!
# Operand_b is correct!
# The result is correct!
# 
# ******************************************************
#  *** There is a total of        101 values to read ***
#  *** and        100 values to write. ***
#  *** Total tests :        101 *** 
#  *** Passed values:        101 *** 
#  *** Failed values:          0 *** 
#  ******************************************************
# 
# ***********************************************************
# ***  THIS IS A SELF-CHECKING TESTBENCH.  YOU  DON'T ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# ** Note: $finish    : ../lab01_testbench-interface/instr_register_test.sv(103)
#    Time: 2056 ns  Iteration: 1  Instance: /top/test
# End time: 23:31:19 on Apr 21,2024, Elapsed time: 0:00:00
# Errors: 0, Warnings: 0
