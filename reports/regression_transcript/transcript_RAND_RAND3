# 1
# Model Technology ModelSim - Intel FPGA Edition vlog 10.5c Compiler 2017.01 Jan 23 2017
# Start time: 08:53:13 on Apr 15,2024
# vlog -sv -timescale 1ps/1ps -work work -f sources.txt 
# -- Compiling package instr_register_pkg
# -- Compiling module instr_register
# -- Importing package instr_register_pkg
# -- Compiling module instr_register_test
# ** Warning: ../lab01_testbench-interface/instr_register_test.sv(89): (vlog-2240) Treating stand-alone use of function 'check_results' as an implicit VOID cast.
# ** Warning: ../lab01_testbench-interface/instr_register_test.sv(93): (vlog-2240) Treating stand-alone use of function 'final_report' as an implicit VOID cast.
# ** Warning: ../lab01_testbench-interface/instr_register_test.sv(154): (vlog-2250) Function "check_results" has no return value assignment.
# ** Warning: ../lab01_testbench-interface/instr_register_test.sv(250): (vlog-2250) Function "final_report" has no return value assignment.
# -- Compiling module top
# 
# Top level modules:
# 	top
# End time: 08:53:13 on Apr 15,2024, Elapsed time: 0:00:00
# Errors: 0, Warnings: 4
# vsim -novopt -quiet -nocoverage "+notimingchecks" "+nowarnTSCALE" -sva top -GTEST_NAME=RAND_RAND3 -GWR_ORDER=1 -GWR_NR=50 -GRD_ORDER=1 -GRD_NR=50 -GSEED_VAL=349370353 
# Start time: 08:53:13 on Apr 15,2024
# 
# 
# ***********************************************************
# ***  THIS IS A SELF-CHECKING TESTBENCH.  YOU DON'T ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# Reseting the instruction register...
# 
# Writing values to register stack...
# Writing to register location 10: 
#   opcode = 4 (SUB)
#   operand_a = -10
#   operand_b = 5
# 
# Am salvat! WRP 10
# OPCODE =  4
# OPERAND_A: -10
# OPERAND_B: 5
# 
# RESULT: 0
# 
# Writing to register location 6: 
#   opcode = 2 (PASSB)
#   operand_a = -11
#   operand_b = 4
# 
# Am salvat! WRP 6
# OPCODE =  2
# OPERAND_A: -11
# OPERAND_B: 4
# 
# RESULT: 0
# 
# Writing to register location 25: 
#   opcode = 6 (DIV)
#   operand_a = -12
#   operand_b = 10
# 
# Am salvat! WRP 25
# OPCODE =  6
# OPERAND_A: -12
# OPERAND_B: 10
# 
# RESULT: 0
# 
# Writing to register location 9: 
#   opcode = 1 (PASSA)
#   operand_a = 10
#   operand_b = 6
# 
# Am salvat! WRP 9
# OPCODE =  1
# OPERAND_A: 10
# OPERAND_B: 6
# 
# RESULT: 0
# 
# Writing to register location 26: 
#   opcode = 1 (PASSA)
#   operand_a = -10
#   operand_b = 9
# 
# Am salvat! WRP 26
# OPCODE =  1
# OPERAND_A: -10
# OPERAND_B: 9
# 
# RESULT: 0
# 
# Writing to register location 29: 
#   opcode = 2 (PASSB)
#   operand_a = -7
#   operand_b = 9
# 
# Am salvat! WRP 29
# OPCODE =  2
# OPERAND_A: -7
# OPERAND_B: 9
# 
# RESULT: 0
# 
# Writing to register location 16: 
#   opcode = 5 (MULT)
#   operand_a = -7
#   operand_b = 10
# 
# Am salvat! WRP 16
# OPCODE =  5
# OPERAND_A: -7
# OPERAND_B: 10
# 
# RESULT: 0
# 
# Writing to register location 7: 
#   opcode = 0 (ZERO)
#   operand_a = -6
#   operand_b = 13
# 
# Am salvat! WRP 7
# OPCODE =  0
# OPERAND_A: -6
# OPERAND_B: 13
# 
# RESULT: 0
# 
# Writing to register location 25: 
#   opcode = 7 (MOD)
#   operand_a = -3
#   operand_b = 0
# 
# Am salvat! WRP 25
# OPCODE =  7
# OPERAND_A: -3
# OPERAND_B: 0
# 
# RESULT: 0
# 
# Writing to register location 6: 
#   opcode = 1 (PASSA)
#   operand_a = 0
#   operand_b = 7
# 
# Am salvat! WRP 6
# OPCODE =  1
# OPERAND_A: 0
# OPERAND_B: 7
# 
# RESULT: 0
# 
# Writing to register location 25: 
#   opcode = 6 (DIV)
#   operand_a = -9
#   operand_b = 9
# 
# Am salvat! WRP 25
# OPCODE =  6
# OPERAND_A: -9
# OPERAND_B: 9
# 
# RESULT: 0
# 
# Writing to register location 6: 
#   opcode = 1 (PASSA)
#   operand_a = 9
#   operand_b = 6
# 
# Am salvat! WRP 6
# OPCODE =  1
# OPERAND_A: 9
# OPERAND_B: 6
# 
# RESULT: 0
# 
# Writing to register location 6: 
#   opcode = 6 (DIV)
#   operand_a = -10
#   operand_b = 9
# 
# Am salvat! WRP 6
# OPCODE =  6
# OPERAND_A: -10
# OPERAND_B: 9
# 
# RESULT: 0
# 
# Writing to register location 4: 
#   opcode = 6 (DIV)
#   operand_a = 9
#   operand_b = 6
# 
# Am salvat! WRP 4
# OPCODE =  6
# OPERAND_A: 9
# OPERAND_B: 6
# 
# RESULT: 0
# 
# Writing to register location 9: 
#   opcode = 4 (SUB)
#   operand_a = 6
#   operand_b = 6
# 
# Am salvat! WRP 9
# OPCODE =  4
# OPERAND_A: 6
# OPERAND_B: 6
# 
# RESULT: 0
# 
# Writing to register location 17: 
#   opcode = 1 (PASSA)
#   operand_a = -10
#   operand_b = 4
# 
# Am salvat! WRP 17
# OPCODE =  1
# OPERAND_A: -10
# OPERAND_B: 4
# 
# RESULT: 0
# 
# Writing to register location 3: 
#   opcode = 1 (PASSA)
#   operand_a = 4
#   operand_b = 9
# 
# Am salvat! WRP 3
# OPCODE =  1
# OPERAND_A: 4
# OPERAND_B: 9
# 
# RESULT: 0
# 
# Writing to register location 11: 
#   opcode = 3 (ADD)
#   operand_a = -7
#   operand_b = 1
# 
# Am salvat! WRP 11
# OPCODE =  3
# OPERAND_A: -7
# OPERAND_B: 1
# 
# RESULT: 0
# 
# Writing to register location 4: 
#   opcode = 3 (ADD)
#   operand_a = 1
#   operand_b = 3
# 
# Am salvat! WRP 4
# OPCODE =  3
# OPERAND_A: 1
# OPERAND_B: 3
# 
# RESULT: 0
# 
# Writing to register location 16: 
#   opcode = 4 (SUB)
#   operand_a = -13
#   operand_b = 11
# 
# Am salvat! WRP 16
# OPCODE =  4
# OPERAND_A: -13
# OPERAND_B: 11
# 
# RESULT: 0
# 
# Writing to register location 11: 
#   opcode = 0 (ZERO)
#   operand_a = 11
#   operand_b = 4
# 
# Am salvat! WRP 11
# OPCODE =  0
# OPERAND_A: 11
# OPERAND_B: 4
# 
# RESULT: 0
# 
# Writing to register location 10: 
#   opcode = 3 (ADD)
#   operand_a = -12
#   operand_b = 0
# 
# Am salvat! WRP 10
# OPCODE =  3
# OPERAND_A: -12
# OPERAND_B: 0
# 
# RESULT: 0
# 
# Writing to register location 22: 
#   opcode = 2 (PASSB)
#   operand_a = 0
#   operand_b = 11
# 
# Am salvat! WRP 22
# OPCODE =  2
# OPERAND_A: 0
# OPERAND_B: 11
# 
# RESULT: 0
# 
# Writing to register location 3: 
#   opcode = 6 (DIV)
#   operand_a = 11
#   operand_b = 10
# 
# Am salvat! WRP 3
# OPCODE =  6
# OPERAND_A: 11
# OPERAND_B: 10
# 
# RESULT: 0
# 
# Writing to register location 29: 
#   opcode = 3 (ADD)
#   operand_a = -6
#   operand_b = 6
# 
# Am salvat! WRP 29
# OPCODE =  3
# OPERAND_A: -6
# OPERAND_B: 6
# 
# RESULT: 0
# 
# Writing to register location 0: 
#   opcode = 5 (MULT)
#   operand_a = -10
#   operand_b = 3
# 
# Am salvat! WRP 0
# OPCODE =  5
# OPERAND_A: -10
# OPERAND_B: 3
# 
# RESULT: 0
# 
# Writing to register location 10: 
#   opcode = 0 (ZERO)
#   operand_a = 3
#   operand_b = 13
# 
# Am salvat! WRP 10
# OPCODE =  0
# OPERAND_A: 3
# OPERAND_B: 13
# 
# RESULT: 0
# 
# Writing to register location 21: 
#   opcode = 2 (PASSB)
#   operand_a = -3
#   operand_b = 0
# 
# Am salvat! WRP 21
# OPCODE =  2
# OPERAND_A: -3
# OPERAND_B: 0
# 
# RESULT: 0
# 
# Writing to register location 10: 
#   opcode = 5 (MULT)
#   operand_a = 0
#   operand_b = 10
# 
# Am salvat! WRP 10
# OPCODE =  5
# OPERAND_A: 0
# OPERAND_B: 10
# 
# RESULT: 0
# 
# Writing to register location 13: 
#   opcode = 2 (PASSB)
#   operand_a = 10
#   operand_b = 5
# 
# Am salvat! WRP 13
# OPCODE =  2
# OPERAND_A: 10
# OPERAND_B: 5
# 
# RESULT: 0
# 
# Writing to register location 16: 
#   opcode = 5 (MULT)
#   operand_a = -11
#   operand_b = 10
# 
# Am salvat! WRP 16
# OPCODE =  5
# OPERAND_A: -11
# OPERAND_B: 10
# 
# RESULT: 0
# 
# Writing to register location 27: 
#   opcode = 0 (ZERO)
#   operand_a = 10
#   operand_b = 13
# 
# Am salvat! WRP 27
# OPCODE =  0
# OPERAND_A: 10
# OPERAND_B: 13
# 
# RESULT: 0
# 
# Writing to register location 10: 
#   opcode = 3 (ADD)
#   operand_a = -3
#   operand_b = 0
# 
# Am salvat! WRP 10
# OPCODE =  3
# OPERAND_A: -3
# OPERAND_B: 0
# 
# RESULT: 0
# 
# Writing to register location 6: 
#   opcode = 2 (PASSB)
#   operand_a = 0
#   operand_b = 11
# 
# Am salvat! WRP 6
# OPCODE =  2
# OPERAND_A: 0
# OPERAND_B: 11
# 
# RESULT: 0
# 
# Writing to register location 23: 
#   opcode = 6 (DIV)
#   operand_a = -5
#   operand_b = 10
# 
# Am salvat! WRP 23
# OPCODE =  6
# OPERAND_A: -5
# OPERAND_B: 10
# 
# RESULT: 0
# 
# Writing to register location 21: 
#   opcode = 7 (MOD)
#   operand_a = -6
#   operand_b = 6
# 
# Am salvat! WRP 21
# OPCODE =  7
# OPERAND_A: -6
# OPERAND_B: 6
# 
# RESULT: 0
# 
# Writing to register location 27: 
#   opcode = 5 (MULT)
#   operand_a = -10
#   operand_b = 7
# 
# Am salvat! WRP 27
# OPCODE =  5
# OPERAND_A: -10
# OPERAND_B: 7
# 
# RESULT: 0
# 
# Writing to register location 13: 
#   opcode = 3 (ADD)
#   operand_a = 7
#   operand_b = 5
# 
# Am salvat! WRP 13
# OPCODE =  3
# OPERAND_A: 7
# OPERAND_B: 5
# 
# RESULT: 0
# 
# Writing to register location 30: 
#   opcode = 5 (MULT)
#   operand_a = 5
#   operand_b = 11
# 
# Am salvat! WRP 30
# OPCODE =  5
# OPERAND_A: 5
# OPERAND_B: 11
# 
# RESULT: 0
# 
# Writing to register location 19: 
#   opcode = 6 (DIV)
#   operand_a = -5
#   operand_b = 13
# 
# Am salvat! WRP 19
# OPCODE =  6
# OPERAND_A: -5
# OPERAND_B: 13
# 
# RESULT: 0
# 
# Writing to register location 0: 
#   opcode = 3 (ADD)
#   operand_a = -3
#   operand_b = 14
# 
# Am salvat! WRP 0
# OPCODE =  3
# OPERAND_A: -3
# OPERAND_B: 14
# 
# RESULT: 0
# 
# Writing to register location 5: 
#   opcode = 0 (ZERO)
#   operand_a = -2
#   operand_b = 3
# 
# Am salvat! WRP 5
# OPCODE =  0
# OPERAND_A: -2
# OPERAND_B: 3
# 
# RESULT: 0
# 
# Writing to register location 13: 
#   opcode = 5 (MULT)
#   operand_a = -13
#   operand_b = 0
# 
# Am salvat! WRP 13
# OPCODE =  5
# OPERAND_A: -13
# OPERAND_B: 0
# 
# RESULT: 0
# 
# Writing to register location 10: 
#   opcode = 5 (MULT)
#   operand_a = 0
#   operand_b = 5
# 
# Am salvat! WRP 10
# OPCODE =  5
# OPERAND_A: 0
# OPERAND_B: 5
# 
# RESULT: 0
# 
# Writing to register location 25: 
#   opcode = 2 (PASSB)
#   operand_a = 5
#   operand_b = 13
# 
# Am salvat! WRP 25
# OPCODE =  2
# OPERAND_A: 5
# OPERAND_B: 13
# 
# RESULT: 0
# 
# Writing to register location 17: 
#   opcode = 1 (PASSA)
#   operand_a = 13
#   operand_b = 10
# 
# Am salvat! WRP 17
# OPCODE =  1
# OPERAND_A: 13
# OPERAND_B: 10
# 
# RESULT: 0
# 
# Writing to register location 23: 
#   opcode = 1 (PASSA)
#   operand_a = 10
#   operand_b = 9
# 
# Am salvat! WRP 23
# OPCODE =  1
# OPERAND_A: 10
# OPERAND_B: 9
# 
# RESULT: 0
# 
# Writing to register location 26: 
#   opcode = 7 (MOD)
#   operand_a = -7
#   operand_b = 1
# 
# Am salvat! WRP 26
# OPCODE =  7
# OPERAND_A: -7
# OPERAND_B: 1
# 
# RESULT: 0
# 
# Writing to register location 5: 
#   opcode = 2 (PASSB)
#   operand_a = 1
#   operand_b = 7
# 
# Am salvat! WRP 5
# OPCODE =  2
# OPERAND_A: 1
# OPERAND_B: 7
# 
# RESULT: 0
# 
# Writing to register location 2: 
#   opcode = 5 (MULT)
#   operand_a = -9
#   operand_b = 10
# 
# Am salvat! WRP 2
# OPCODE =  5
# OPERAND_A: -9
# OPERAND_B: 10
# 
# RESULT: 0
# 
# 
# Reading back the same register locations written...
# Read from register location 21: 
#   opcode = 7 (MOD)
#   operand_a = -6
#   operand_b = 6
# 
#   result = 0
# 
# Actual result = 0
# 
# Expected result = x
# 
# Opcode CORRECT!
# Operand_a CORRECT!
# Operand_b CORRECT!
# Result INCORRECT!
# Read from register location 21: 
#   opcode = 7 (MOD)
#   operand_a = -6
#   operand_b = 6
# 
#   result = 0
# 
# Actual result = 0
# 
# Expected result = x
# 
# Opcode CORRECT!
# Operand_a CORRECT!
# Operand_b CORRECT!
# Result INCORRECT!
# Read from register location 18: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# Actual result = 0
# 
# Expected result = x
# 
# Opcode INCORRECT!
# Operand_a INCORRECT!
# Operand_b INCORRECT!
# Result INCORRECT!
# Read from register location 7: 
#   opcode = 0 (ZERO)
#   operand_a = -6
#   operand_b = 13
# 
#   result = 0
# 
# Actual result = 0
# 
# Expected result = x
# 
# Opcode CORRECT!
# Operand_a CORRECT!
# Operand_b CORRECT!
# Result INCORRECT!
# Read from register location 14: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# Actual result = 0
# 
# Expected result = x
# 
# Opcode INCORRECT!
# Operand_a INCORRECT!
# Operand_b INCORRECT!
# Result INCORRECT!
# Read from register location 13: 
#   opcode = 5 (MULT)
#   operand_a = -13
#   operand_b = 0
# 
#   result = 0
# 
# Actual result = 0
# 
# Expected result = x
# 
# Opcode CORRECT!
# Operand_a CORRECT!
# Operand_b CORRECT!
# Result INCORRECT!
# Read from register location 11: 
#   opcode = 0 (ZERO)
#   operand_a = 11
#   operand_b = 4
# 
#   result = 0
# 
# Actual result = 0
# 
# Expected result = x
# 
# Opcode CORRECT!
# Operand_a CORRECT!
# Operand_b CORRECT!
# Result INCORRECT!
# Read from register location 15: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# Actual result = 0
# 
# Expected result = x
# 
# Opcode INCORRECT!
# Operand_a INCORRECT!
# Operand_b INCORRECT!
# Result INCORRECT!
# Read from register location 26: 
#   opcode = 7 (MOD)
#   operand_a = -7
#   operand_b = 1
# 
#   result = 0
# 
# Actual result = 0
# 
# Expected result = x
# 
# Opcode CORRECT!
# Operand_a CORRECT!
# Operand_b CORRECT!
# Result INCORRECT!
# Read from register location 10: 
#   opcode = 5 (MULT)
#   operand_a = 0
#   operand_b = 5
# 
#   result = 0
# 
# Actual result = 0
# 
# Expected result = x
# 
# Opcode CORRECT!
# Operand_a CORRECT!
# Operand_b CORRECT!
# Result INCORRECT!
# Read from register location 23: 
#   opcode = 1 (PASSA)
#   operand_a = 10
#   operand_b = 9
# 
#   result = 10
# 
# Actual result = 10
# 
# Expected result = x
# 
# Opcode CORRECT!
# Operand_a CORRECT!
# Operand_b CORRECT!
# Result INCORRECT!
# Read from register location 9: 
#   opcode = 4 (SUB)
#   operand_a = 6
#   operand_b = 6
# 
#   result = 0
# 
# Actual result = 0
# 
# Expected result = x
# 
# Opcode CORRECT!
# Operand_a CORRECT!
# Operand_b CORRECT!
# Result INCORRECT!
# Read from register location 22: 
#   opcode = 2 (PASSB)
#   operand_a = 0
#   operand_b = 11
# 
#   result = 11
# 
# Actual result = 11
# 
# Expected result = x
# 
# Opcode CORRECT!
# Operand_a CORRECT!
# Operand_b CORRECT!
# Result INCORRECT!
# Read from register location 25: 
#   opcode = 2 (PASSB)
#   operand_a = 5
#   operand_b = 13
# 
#   result = 13
# 
# Actual result = 13
# 
# Expected result = x
# 
# Opcode CORRECT!
# Operand_a CORRECT!
# Operand_b CORRECT!
# Result INCORRECT!
# Read from register location 19: 
#   opcode = 6 (DIV)
#   operand_a = -5
#   operand_b = 13
# 
#   result = 0
# 
# Actual result = 0
# 
# Expected result = x
# 
# Opcode CORRECT!
# Operand_a CORRECT!
# Operand_b CORRECT!
# Result INCORRECT!
# Read from register location 31: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# Actual result = 0
# 
# Expected result = x
# 
# Opcode INCORRECT!
# Operand_a INCORRECT!
# Operand_b INCORRECT!
# Result INCORRECT!
# Read from register location 1: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# Actual result = 0
# 
# Expected result = x
# 
# Opcode INCORRECT!
# Operand_a INCORRECT!
# Operand_b INCORRECT!
# Result INCORRECT!
# Read from register location 25: 
#   opcode = 2 (PASSB)
#   operand_a = 5
#   operand_b = 13
# 
#   result = 13
# 
# Actual result = 13
# 
# Expected result = x
# 
# Opcode CORRECT!
# Operand_a CORRECT!
# Operand_b CORRECT!
# Result INCORRECT!
# Read from register location 9: 
#   opcode = 4 (SUB)
#   operand_a = 6
#   operand_b = 6
# 
#   result = 0
# 
# Actual result = 0
# 
# Expected result = x
# 
# Opcode CORRECT!
# Operand_a CORRECT!
# Operand_b CORRECT!
# Result INCORRECT!
# Read from register location 31: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# Actual result = 0
# 
# Expected result = x
# 
# Opcode INCORRECT!
# Operand_a INCORRECT!
# Operand_b INCORRECT!
# Result INCORRECT!
# Read from register location 8: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# Actual result = 0
# 
# Expected result = x
# 
# Opcode INCORRECT!
# Operand_a INCORRECT!
# Operand_b INCORRECT!
# Result INCORRECT!
# Read from register location 12: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# Actual result = 0
# 
# Expected result = x
# 
# Opcode INCORRECT!
# Operand_a INCORRECT!
# Operand_b INCORRECT!
# Result INCORRECT!
# Read from register location 11: 
#   opcode = 0 (ZERO)
#   operand_a = 11
#   operand_b = 4
# 
#   result = 0
# 
# Actual result = 0
# 
# Expected result = x
# 
# Opcode CORRECT!
# Operand_a CORRECT!
# Operand_b CORRECT!
# Result INCORRECT!
# Read from register location 24: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# Actual result = 0
# 
# Expected result = x
# 
# Opcode INCORRECT!
# Operand_a INCORRECT!
# Operand_b INCORRECT!
# Result INCORRECT!
# Read from register location 29: 
#   opcode = 3 (ADD)
#   operand_a = -6
#   operand_b = 6
# 
#   result = 0
# 
# Actual result = 0
# 
# Expected result = x
# 
# Opcode CORRECT!
# Operand_a CORRECT!
# Operand_b CORRECT!
# Result INCORRECT!
# Read from register location 25: 
#   opcode = 2 (PASSB)
#   operand_a = 5
#   operand_b = 13
# 
#   result = 13
# 
# Actual result = 13
# 
# Expected result = x
# 
# Opcode CORRECT!
# Operand_a CORRECT!
# Operand_b CORRECT!
# Result INCORRECT!
# Read from register location 8: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# Actual result = 0
# 
# Expected result = x
# 
# Opcode INCORRECT!
# Operand_a INCORRECT!
# Operand_b INCORRECT!
# Result INCORRECT!
# Read from register location 6: 
#   opcode = 2 (PASSB)
#   operand_a = 0
#   operand_b = 11
# 
#   result = 11
# 
# Actual result = 11
# 
# Expected result = x
# 
# Opcode CORRECT!
# Operand_a CORRECT!
# Operand_b CORRECT!
# Result INCORRECT!
# Read from register location 15: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# Actual result = 0
# 
# Expected result = x
# 
# Opcode INCORRECT!
# Operand_a INCORRECT!
# Operand_b INCORRECT!
# Result INCORRECT!
# Read from register location 26: 
#   opcode = 7 (MOD)
#   operand_a = -7
#   operand_b = 1
# 
#   result = 0
# 
# Actual result = 0
# 
# Expected result = x
# 
# Opcode CORRECT!
# Operand_a CORRECT!
# Operand_b CORRECT!
# Result INCORRECT!
# Read from register location 11: 
#   opcode = 0 (ZERO)
#   operand_a = 11
#   operand_b = 4
# 
#   result = 0
# 
# Actual result = 0
# 
# Expected result = x
# 
# Opcode CORRECT!
# Operand_a CORRECT!
# Operand_b CORRECT!
# Result INCORRECT!
# Read from register location 10: 
#   opcode = 5 (MULT)
#   operand_a = 0
#   operand_b = 5
# 
#   result = 0
# 
# Actual result = 0
# 
# Expected result = x
# 
# Opcode CORRECT!
# Operand_a CORRECT!
# Operand_b CORRECT!
# Result INCORRECT!
# Read from register location 6: 
#   opcode = 2 (PASSB)
#   operand_a = 0
#   operand_b = 11
# 
#   result = 11
# 
# Actual result = 11
# 
# Expected result = x
# 
# Opcode CORRECT!
# Operand_a CORRECT!
# Operand_b CORRECT!
# Result INCORRECT!
# Read from register location 22: 
#   opcode = 2 (PASSB)
#   operand_a = 0
#   operand_b = 11
# 
#   result = 11
# 
# Actual result = 11
# 
# Expected result = x
# 
# Opcode CORRECT!
# Operand_a CORRECT!
# Operand_b CORRECT!
# Result INCORRECT!
# Read from register location 6: 
#   opcode = 2 (PASSB)
#   operand_a = 0
#   operand_b = 11
# 
#   result = 11
# 
# Actual result = 11
# 
# Expected result = x
# 
# Opcode CORRECT!
# Operand_a CORRECT!
# Operand_b CORRECT!
# Result INCORRECT!
# Read from register location 10: 
#   opcode = 5 (MULT)
#   operand_a = 0
#   operand_b = 5
# 
#   result = 0
# 
# Actual result = 0
# 
# Expected result = x
# 
# Opcode CORRECT!
# Operand_a CORRECT!
# Operand_b CORRECT!
# Result INCORRECT!
# Read from register location 9: 
#   opcode = 4 (SUB)
#   operand_a = 6
#   operand_b = 6
# 
#   result = 0
# 
# Actual result = 0
# 
# Expected result = x
# 
# Opcode CORRECT!
# Operand_a CORRECT!
# Operand_b CORRECT!
# Result INCORRECT!
# Read from register location 17: 
#   opcode = 1 (PASSA)
#   operand_a = 13
#   operand_b = 10
# 
#   result = 13
# 
# Actual result = 13
# 
# Expected result = x
# 
# Opcode CORRECT!
# Operand_a CORRECT!
# Operand_b CORRECT!
# Result INCORRECT!
# Read from register location 23: 
#   opcode = 1 (PASSA)
#   operand_a = 10
#   operand_b = 9
# 
#   result = 10
# 
# Actual result = 10
# 
# Expected result = x
# 
# Opcode CORRECT!
# Operand_a CORRECT!
# Operand_b CORRECT!
# Result INCORRECT!
# Read from register location 29: 
#   opcode = 3 (ADD)
#   operand_a = -6
#   operand_b = 6
# 
#   result = 0
# 
# Actual result = 0
# 
# Expected result = x
# 
# Opcode CORRECT!
# Operand_a CORRECT!
# Operand_b CORRECT!
# Result INCORRECT!
# Read from register location 20: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# Actual result = 0
# 
# Expected result = x
# 
# Opcode INCORRECT!
# Operand_a INCORRECT!
# Operand_b INCORRECT!
# Result INCORRECT!
# Read from register location 24: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# Actual result = 0
# 
# Expected result = x
# 
# Opcode INCORRECT!
# Operand_a INCORRECT!
# Operand_b INCORRECT!
# Result INCORRECT!
# Read from register location 15: 
#   opcode = 0 (ZERO)
#   operand_a = 0
#   operand_b = 0
# 
#   result = 0
# 
# Actual result = 0
# 
# Expected result = x
# 
# Opcode INCORRECT!
# Operand_a INCORRECT!
# Operand_b INCORRECT!
# Result INCORRECT!
# Read from register location 19: 
#   opcode = 6 (DIV)
#   operand_a = -5
#   operand_b = 13
# 
#   result = 0
# 
# Actual result = 0
# 
# Expected result = x
# 
# Opcode CORRECT!
# Operand_a CORRECT!
# Operand_b CORRECT!
# Result INCORRECT!
# Read from register location 17: 
#   opcode = 1 (PASSA)
#   operand_a = 13
#   operand_b = 10
# 
#   result = 13
# 
# Actual result = 13
# 
# Expected result = x
# 
# Opcode CORRECT!
# Operand_a CORRECT!
# Operand_b CORRECT!
# Result INCORRECT!
# Read from register location 21: 
#   opcode = 7 (MOD)
#   operand_a = -6
#   operand_b = 6
# 
#   result = 0
# 
# Actual result = 0
# 
# Expected result = x
# 
# Opcode CORRECT!
# Operand_a CORRECT!
# Operand_b CORRECT!
# Result INCORRECT!
# Read from register location 27: 
#   opcode = 5 (MULT)
#   operand_a = -10
#   operand_b = 7
# 
#   result = -70
# 
# Actual result = -70
# 
# Expected result = x
# 
# Opcode CORRECT!
# Operand_a CORRECT!
# Operand_b CORRECT!
# Result INCORRECT!
# Read from register location 6: 
#   opcode = 2 (PASSB)
#   operand_a = 0
#   operand_b = 11
# 
#   result = 11
# 
# Actual result = 11
# 
# Expected result = x
# 
# Opcode CORRECT!
# Operand_a CORRECT!
# Operand_b CORRECT!
# Result INCORRECT!
# Read from register location 16: 
#   opcode = 5 (MULT)
#   operand_a = -11
#   operand_b = 10
# 
#   result = -110
# 
# Actual result = -110
# 
# Expected result = x
# 
# Opcode CORRECT!
# Operand_a CORRECT!
# Operand_b CORRECT!
# Result INCORRECT!
# Read from register location 16: 
#   opcode = 5 (MULT)
#   operand_a = -11
#   operand_b = 10
# 
#   result = -110
# 
# Actual result = -110
# 
# Expected result = x
# 
# Opcode CORRECT!
# Operand_a CORRECT!
# Operand_b CORRECT!
# Result INCORRECT!
# Read from register location 0: 
#   opcode = 3 (ADD)
#   operand_a = -3
#   operand_b = 14
# 
#   result = 11
# 
# Actual result = 11
# 
# Expected result = x
# 
# Opcode CORRECT!
# Operand_a CORRECT!
# Operand_b CORRECT!
# Result INCORRECT!
# 
# ***********************************************************
# ***  THIS IS A SELF-CHECKING TESTBENCH.  YOU  DON'T ***
# ***  NEED TO VISUALLY VERIFY THAT THE OUTPUT VALUES     ***
# ***  MATCH THE INPUT VALUES FOR EACH REGISTER LOCATION  ***
# ***********************************************************
# 
# ** Note: $finish    : ../lab01_testbench-interface/instr_register_test.sv(103)
#    Time: 1056 ns  Iteration: 1  Instance: /top/test
# End time: 08:53:14 on Apr 15,2024, Elapsed time: 0:00:01
# Errors: 0, Warnings: 0
